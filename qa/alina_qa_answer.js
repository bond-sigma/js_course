/**
 Есть исходный код примерный я так понимаю
 **/

var itemName    = "some_value";
var testObject  = {
    addToCart: function (itemName) {
        console.log(itemName);
    }
};

for (var i = 0; i < 10; i++) {

    itemName  = itemName + 'i';

    document.createElement('button').addEventListener("click", function () {
        testObject.addToCart(itemName);
    }, false);
}

/**
 * Ожидания: Мы хотим чтобы для каждой кнопки при нажатии выводился i с номером итерации на которой эта кнопка была создана.
 * Резлуьтат: А в итоге получаем что выводится значение последнего i;
 * Причина: Хотя и простые объекты такие как строки и числа при присвоении копируются занчении а не ссылки, здесь же не происходит
 * никакого присвоения  - ты испольузешь переменную из окружения выше.  Сама по себе переменная это ссылка на значение где тов  памяти.
 * В каждом обработчике кнопки ты используешь одну и ту же ссылку - происходит замыкание. 10 раз замыкаешь переменную itemName.
 * ЧТо в итоге означает следующее  - после создание первой кнопки и первого обработчика клика - ты в новой итерации цикла для второй кнопки меняешь
 * itemName и обработчик первого тоже видит эти изменения. Что по факту означает что после всего цикла
 * все обработчики видят переменную одну и туже и значение в ней то что было на последней итерации цикла.
 *
 * Как это можно исправить. Варианта 2.
 */

/**
 * Вариант 1. Немедленно вызываемая функция. Что здесь происходит  - мы создаем немедленно вызываемую функцию с параметром  item
 * и вызываем ее сразу же. Поскольку строка это простое значение то при передачи itemName  в эту функцию копируется значение на текущей итерации
 * цикла и параметр  item внутри уже никак не связан с изменениями  itemName  извне функции. Происходит как раз то что ты и ожидала копирование по значению
 *
 */

for (var i = 0; i < 10; i++) {

    itemName  = itemName + 'i';

    (function (item){

        document.createElement('button').addEventListener("click", function () {
            testObject.addToCart(item);
        }, false);

    })(itemName);

}

/**
 Второй вариант это записывать текущее значение в атрибут. И потом его читать.
 **/